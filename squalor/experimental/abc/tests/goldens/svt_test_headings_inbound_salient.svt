TREE:
(  salientTop
   (  entitySeq
      (  topEntity
         (  heading #title
            (  headingContent
               (  paraBlockText
                  (  linearContent Test of headings  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #toc
            (  qualifier { toc_depth=4 }  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #=
            (  headingContent
               (  paraBlockText
                  (  linearContent Section heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #==
            (  headingContent
               (  paraBlockText
                  (  linearContent Subsection heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent Normal text paragraph  )
                     (  linearContent .  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #==
            (  headingContent
               (  paraBlockText
                  (  linearContent Subsection heading  )
                  (  linearContent ,  )
                  (  linearContent another  )
                  (  linearContent ,  )
                  (  linearContent that is absurdly long and so which gets split  )
                  (  inBetween \n  )
                  (  linearContent <SP><SP> across lines  )  )  )
            (  qualifier <SP> { #explicit_subsection_anchor unused_qualifier=nothing further=unused }  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent Normal text paragraph  )
                     (  linearContent .  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #=
            (  headingContent
               (  paraBlockText
                  (  linearContent Section heading  )
                  (  linearContent ,  )
                  (  linearContent another  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent Text just after a section heading  )
                     (  linearContent .  )
                     (  linearContent Text just after a section heading  )
                     (  linearContent .  )
                     (  linearContent Text just  )
                     (  inBetween \n  )
                     (  linearContent after a section heading  )
                     (  linearContent .  )
                     (  linearContent Text just after a section heading  )
                     (  linearContent .  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #==
            (  headingContent
               (  paraBlockText
                  (  linearContent Subsection heading  )
                  (  linearContent ,  )
                  (  linearContent text before  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #===
            (  headingContent
               (  paraBlockText
                  (  linearContent Subsubsection heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #====
            (  headingContent
               (  paraBlockText
                  (  linearContent Level 4 heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #=====
            (  headingContent
               (  paraBlockText
                  (  linearContent Level 5 heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #======
            (  headingContent
               (  paraBlockText
                  (  linearContent Level 6 heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent Text that should be just a little smaller  )
                     (  linearContent .  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #=
            (  headingContent
               (  paraBlockText
                  (  linearContent Section heading  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent Repetition of heading should be handled with uniquification of anchor  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #===
            (  headingContent
               (  paraBlockText
                  (  linearContent Skipped subsection  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  heading #==
            (  headingContent
               (  paraBlockText
                  (  linearContent Confused subsection  )  )  )  )  )
      (  blankLine \n\n  )
      (  codeInSalient
         (  enterCode ``` \n  )
         (  salientInCode
            (  enterSalient ;  )
            (  entitySeq
               (  topEntity
                  (  para
                     (  paraBlock
                        (  paraBlockContent
                           (  paraBlockText
                              (  linearContent This is a single line comment  )
                              (  linearContent .  )  )  )  )  )  )  )
            (  exitSalient \n  )  )
         (  exitCode ```  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockText
                     (  linearContent The building blocks for Patinon  )
                     (  linearContent '  )
                     (  linearContent s graphs are  )
                     (  inBetween  )
                     (  linearContent *  )
                     (  linearContent transitively irreducible st  )
                     (  linearContent -  )
                     (  linearContent planar  )
                     (  inBetween \n  )
                     (  linearContent graphs and the source and sink nodes can be extrapolated  )
                     (  linearContent *  )
                     (  linearContent .  )
                     (  linearContent Let us unpack that  )
                     (  linearContent ,  )
                     (  inBetween \n  )
                     (  linearContent initially just briefly  )
                     (  linearContent .  )  )  )  )  )  )
      (  blankLine \n\n  )
      (  topEntity
         (  para
            (  paraBlock
               (  paraBlockContent
                  (  paraBlockPlusMore
                     (  detachedList
                        (  eitherList
                           (  listItem
                              (  paraBlockItem @  )
                              (  paraBlockContent
                                 (  paraBlockText
                                    (  linearContent <SP><SP> Planar graphs  )
                                    (  inBetween  )
                                    (  linearContent
                                       POPEN  
                                         )
                                    (  linearContent assumed to be DAGs  )
                                    (  linearContent  PCLOSE  )
                                    (  linearContent are graphs that can be drawing without  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> edge crossings  )
                                    (  linearContent .  )  )  )  )
                           (  inBetween \n  )
                           (  listItem
                              (  paraBlockItem @  )
                              (  paraBlockContent
                                 (  paraBlockText
                                    (  linearContent <SP><SP> Every st  )
                                    (  linearContent -  )
                                    (  linearContent planar graph has one source node and one sink node  )
                                    (  linearContent .  )
                                    (  linearContent All nodes can  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> be reached from the source and are able to reach the sink  )
                                    (  linearContent .  )
                                    (  linearContent In other words  )
                                    (  linearContent ,  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> there is only one graph and the source node is the only one without parents  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> and the sink node is the only one without children  )
                                    (  linearContent .  )
                                    (  linearContent EXTRA CHARACTERS  )
                                    (  linearContent .  )  )  )  )
                           (  inBetween \n  )
                           (  listItem
                              (  paraBlockItem @  )
                              (  paraBlockContent
                                 (  paraBlockText
                                    (  linearContent <SP><SP> Often either a source or sink node is not needed  )
                                    (  linearContent .  )
                                    (  linearContent This is the case for  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> trees  )
                                    (  linearContent ,  )
                                    (  linearContent which have a root  )
                                    (  inBetween  )
                                    (  linearContent
                                       POPEN  
                                         )
                                    (  linearContent the source  )
                                    (  linearContent  PCLOSE  )
                                    (  linearContent but no sink  )
                                    (  linearContent .  )
                                    (  linearContent Patinon can extrapolate a  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> source and  )
                                    (  linearContent /  )
                                    (  linearContent or sink node  )
                                    (  linearContent .  )
                                    (  linearContent The graph must be laid out so that all nodes that  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> are without a parent can be connected to the source  )
                                    (  linearContent ,  )
                                    (  linearContent and all nodes without a  )
                                    (  inBetween \n  )
                                    (  linearContent <SP><SP><SP> child can be connected to the sink  )
                                    (  linearContent .  )  )  )  )  )  )  )  )  )  )  )
      \n  )
   (  eof <EOF>  )  )
