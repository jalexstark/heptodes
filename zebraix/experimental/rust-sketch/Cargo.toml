[workspace]
members = [
    "zebraix-svg",
    "zebraix-proto",
    "jaywalk-base",
    "render-layout",
    "render-svg",
    "render-png",
    "test-samples",
    "combined",
]

# Bin
#
# jaywalk-svg: Core function for rendering, whereas zebraix-svg is full-featured. No
#       semi-dominance. In future only jvk file input.
# zebraix-png: Full-featured, also useful for thumbnails (text-less?).
# jaywalk-png: Core function.
# zebraix-rewriter: proto in and out, just reprocesses location / orders. Do we need this if
#      zebraix-* libs and bins can take equal-index and lexigraphically sort?

# Struct
#
# protobuf
# jaywalk
# rendering
# zebraix-layout: jaywalk+rendering.
# co-combined: dominance and co-dominance zebraix layouts. Narrow usage: merge to single jaywalk
#      with different default edges.
#
# graphs have index vectors and maps for which there are renumbering functions.
#
# Prime and obverse ordinals are not necessarily contiguous.
#
# Final (for rendering) graphs only have extrapolated source and sink if included in rendering.
# During manipulation begin and end markers can give begin and end ranges in index vectors that
# drop the extrapolated nodes as required.
#
# LOGICAL JAYWALK
#
# nodes_by_primary: Master node indices ordered by non-contiguous prime indices.
# nodes_by_obverse
# edges_by_nodes map<from-node, to-node> -> edge index.
#
# nodes vec<Node> The indices into these are the master node indices.
# edges vec<Edge> The indices into these are the master edge indices.
#
# Phantom indices are different from unrendered nodes. They are for spacing, not for graph
# connections.
#
# phantom_prime vec<prime index> After initial processing, ordered prime indices to be skipped.
# phantom_obverse vec<obverse index>
#
# EMBELLISHMENTS
#
# node_rendering vec<NodeRender>  The indices into these are the master node indices.
# edges_rendering vec<EdgeRender> The indices into these are the master edge indices.
#
# Rendering elements have derived_members that by name base rendering off like rendering
#      elements.  Included among these are "base" elements.
#
# base_node_rendering map<String> -> NodeRender
# base_edge_rendering map<String> -> EdgeRender


# Lib
#
# jaywalk-base: Including construct and basic manipulation utils, including codominance switch.
# proto-graph: Include complete conversion to jaywalk.
# render-layout: Everything except actual SVG and PNG specifics. Includes options.
# render-svg
# render-png
# fractional: Coords back into indices. Do we even have a serious use case for this?
# combined: Extra utils for creating graphs with combination of dominance and co-dominance.
